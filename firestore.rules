rules_version = '2';

/**
 * üîê REGLAS DE SEGURIDAD DE FIRESTORE - BLACK HOLE GLOW
 *
 * ULTRA SEGURAS para prevenir trampas:
 * - Solo el propietario puede leer/escribir sus estad√≠sticas
 * - Solo se permiten INCREMENTOS, nunca disminuciones
 * - Validaci√≥n de tipos de datos
 * - Timestamps del servidor (no manipulables por el cliente)
 * - Leaderboard de solo lectura p√∫blica
 *
 * üìã INSTRUCCIONES PARA APLICAR ESTAS REGLAS:
 * 1. Ve a Firebase Console (https://console.firebase.google.com)
 * 2. Selecciona tu proyecto "blackholeglow"
 * 3. En el men√∫ lateral, ve a "Firestore Database"
 * 4. Haz clic en la pesta√±a "Reglas" (Rules)
 * 5. COPIA TODO el contenido de este archivo
 * 6. PEGA en el editor de reglas
 * 7. Haz clic en "Publicar" (Publish)
 *
 * ‚ö†Ô∏è IMPORTANTE: Sin estas reglas, los usuarios podr√≠an manipular sus datos
 */

service cloud.firestore {
  match /databases/{database}/documents {

    // ====================================================
    // üìä COLECCI√ìN: player_stats
    // Estad√≠sticas del jugador (privadas)
    // ====================================================
    match /player_stats/{userId} {
      // ü§ñ Funci√≥n auxiliar para verificar si es un bot
      function isBot() {
        return userId.matches('bot_.*');
      }

      // ‚úÖ LEER: Solo el propietario puede leer sus propias estad√≠sticas, o cualquiera puede leer bots
      allow read: if (request.auth != null && request.auth.uid == userId) || isBot();

      // ‚úÖ CREAR: Permitir creaci√≥n de documento nuevo
      allow create: if (request.auth != null
                    && request.auth.uid == userId
                    && request.resource.data.keys().hasAll(['sunsDestroyed', 'securityHash', 'userId'])
                    && request.resource.data.sunsDestroyed is int
                    && request.resource.data.sunsDestroyed >= 0
                    && request.resource.data.sunsDestroyed <= 100000  // L√≠mite razonable
                    && request.resource.data.userId == userId)
                    // ü§ñ O es un bot (cualquier usuario autenticado puede crear bots)
                    || (request.auth != null
                    && isBot()
                    && request.resource.data.isBot == true
                    && request.resource.data.sunsDestroyed is int
                    && request.resource.data.sunsDestroyed >= 0
                    && request.resource.data.sunsDestroyed <= 100000);

      // ‚úÖ ACTUALIZAR: Solo permitir INCREMENTOS (anti-trampa cr√≠tico)
      allow update: if (request.auth != null
                    && request.auth.uid == userId
                    && request.resource.data.sunsDestroyed is int
                    // üîí CR√çTICO: Solo permite incrementar, NUNCA disminuir
                    && request.resource.data.sunsDestroyed >= resource.data.sunsDestroyed
                    // L√≠mite de incremento por actualizaci√≥n (m√°ximo +10 soles por vez)
                    && (request.resource.data.sunsDestroyed - resource.data.sunsDestroyed) <= 10
                    // Validar que no se modifique el userId
                    && request.resource.data.userId == resource.data.userId)
                    // ü§ñ O es un bot (cualquier usuario autenticado puede actualizar bots)
                    || (request.auth != null
                    && isBot()
                    && request.resource.data.isBot == true
                    && request.resource.data.sunsDestroyed is int);

      // ‚ùå ELIMINAR: No permitir eliminar estad√≠sticas
      allow delete: if false;
    }

    // ====================================================
    // üèÜ COLECCI√ìN: leaderboard
    // Tabla de clasificaci√≥n global (lectura p√∫blica)
    // ====================================================
    match /leaderboard/{userId} {
      // ü§ñ Funci√≥n auxiliar para verificar si es un bot
      function isBot() {
        return userId.matches('bot_.*');
      }

      // ‚úÖ LEER: Todos pueden ver el leaderboard
      allow read: if true;

      // ‚úÖ ESCRIBIR: Solo el propietario puede actualizar su entrada
      allow write: if (request.auth != null
                   && request.auth.uid == userId
                   && request.resource.data.sunsDestroyed is int
                   && request.resource.data.sunsDestroyed >= 0
                   && request.resource.data.userId == userId)
                   // ü§ñ O es un bot (cualquier usuario autenticado puede actualizar bots)
                   || (request.auth != null
                   && isBot()
                   && request.resource.data.isBot == true
                   && request.resource.data.sunsDestroyed is int
                   && request.resource.data.sunsDestroyed >= 0);
    }

    // ====================================================
    // üë§ COLECCI√ìN: users
    // Informaci√≥n de usuarios (para futuro)
    // ====================================================
    match /users/{userId} {
      // ‚úÖ LEER: Solo el propietario puede leer su perfil
      allow read: if request.auth != null && request.auth.uid == userId;

      // ‚úÖ ESCRIBIR: Solo el propietario puede escribir su perfil
      allow write: if request.auth != null && request.auth.uid == userId;
    }

    // ====================================================
    // ‚ùå BLOQUEAR TODO LO DEM√ÅS
    // ====================================================
    match /{document=**} {
      allow read, write: if false;
    }
  }
}

/**
 * üéÆ EXPLICACI√ìN DE LA SEGURIDAD:
 *
 * 1. AUTENTICACI√ìN OBLIGATORIA
 *    - Solo usuarios autenticados pueden escribir
 *    - Cada usuario solo puede modificar SUS datos
 *
 * 2. VALIDACI√ìN DE INCREMENTOS
 *    - La regla cr√≠tica: sunsDestroyed >= resource.data.sunsDestroyed
 *    - Esto previene que alguien reduzca su contador
 *    - M√°ximo +10 soles por actualizaci√≥n (previene saltos masivos)
 *
 * 3. L√çMITES RAZONABLES
 *    - M√°ximo 100,000 soles (previene valores absurdos)
 *    - Incremento m√°ximo de 10 por vez (previene cheats)
 *
 * 4. CAMPOS REQUERIDOS
 *    - sunsDestroyed (int)
 *    - securityHash (string)
 *    - userId (string, no modificable)
 *    - lastUpdate (timestamp del servidor)
 *
 * 5. LEADERBOARD P√öBLICO
 *    - Todos pueden LEER (para ver rankings)
 *    - Solo el due√±o puede ESCRIBIR su propia entrada
 *
 * ‚ö†Ô∏è NOTA IMPORTANTE:
 * Aunque un usuario pueda intentar modificar los archivos
 * locales de SharedPreferences, al sincronizar con Firebase:
 * - Si intenta reducir el contador ‚Üí RECHAZADO por las reglas
 * - Si intenta incrementar m√°s de 10 ‚Üí RECHAZADO
 * - Si intenta modificar datos de otro usuario ‚Üí RECHAZADO
 *
 * La fuente de verdad es SIEMPRE Firebase, y estas reglas
 * garantizan que solo se permitan cambios leg√≠timos.
 */
